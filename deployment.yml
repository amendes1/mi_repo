---
# 1. CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  environment: "production"
  log-level: "info"
  app-name: "Mi App Completa"
  app-version: "1.0.0"
  nginx-config: |
    server {
      listen 80;
      server_name localhost;
      root /usr/share/nginx/html;
      index index.html;
      
      location /health {
        return 200 'healthy';
        add_header Content-Type text/plain;
      }
      
      location /config {
        return 200 'Config loaded';
        add_header Content-Type text/plain;
      }
    }
  application.properties: |
    server.port=8080
    logging.level.root=INFO
    app.feature.toggle=true
---
# 2. DEPLOYMENT (que crea los PODS)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-completa
  labels:
    app: app-completa
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app-completa
  template:
    metadata:
      labels:
        app: app-completa
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        # Variables desde ConfigMap
        - name: APP_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: environment
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: app-name
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: log-level
        # Variables directas
        - name: DATABASE_URL
          value: "mysql://user:pass@db-service:3306/appdb"
        - name: API_KEY
          value: "my-api-key-123456"
        # Montar ConfigMap como volumen
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app-config
          readOnly: true
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d
          readOnly: true
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: config-volume
        configMap:
          name: app-config
          items:
          - key: application.properties
            path: application.properties
      - name: nginx-config-volume
        configMap:
          name: app-config
          items:
          - key: nginx-config
            path: default.conf
---
# 3. SERVICE
apiVersion: v1
kind: Service
metadata:
  name: app-completa-service
  labels:
    app: app-completa
spec:
  selector:
    app: app-completa
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
# 4. INGRESS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-completa-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: app-completa.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app-completa-service
            port:
              number: 80
  - host: api.app-completa.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app-completa-service
            port:
              number: 80
